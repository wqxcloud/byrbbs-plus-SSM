<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <!-- 自动扫描位置 -->
    <context:component-scan base-package="com.chen">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- 1.配置文件的加载 -->
    <context:property-placeholder location="classpath:db.properties,classpath:redis.properties,classpath:email.properties"/>

    <!-- 2.配置数据库连接池 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 3.配置SqlSessionFactory, 引入的是SqlSessionFactoryBean类-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 下面才是mybatis和spring整合最重要的步骤:a.注入数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- mybati全局配置文件 -->
        <property name="configLocation" value="classpath:MybatisConfig.xml"/>
    </bean>

    <!-- 4.Mapper -->
    <!--
    MapperScannerConfigurer：mapper的扫描器，将包下边的mapper接口自动创建代理对象，
    自动创建到spring容器中，bean的id是mapper的类名（首字母小写）
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 配置扫描包的路径
        如果要扫描多个包，中间使用半角逗号分隔
        要求:Mapper.java与Mapper.xml文件在同一个目录下
         -->
        <property name="basePackage" value="com.chen.mapper"/>
        <!-- 使用sqlSessionFactoryBeanName -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--&lt;!&ndash; 配置dao &ndash;&gt;-->
    <!--<bean id="userDao" class="dao.UserDaoImpl">-->
    <!--<property name="sqlSessionFactory" ref="sqlSessionFactory" />-->
    <!--</bean>-->

    <!-- ++++++++++++++++++++++数据相关配置结束+++++++++++++++++++++ -->

    <!--shiro配置-->
    <!--自定义Realm-->
    <bean id="myRealm" class="com.chen.shiro.MyRealm"/>
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myRealm"/>
    </bean>
    <!-- Shiro过滤器 核心-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 身份认证失败，则跳转到登录页面的配置 -->
        <property name="loginUrl" value="/login"/>
        <!-- 权限认证失败，则跳转到指定页面 -->
        <property name="unauthorizedUrl" value="/nopower"/>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <value>
                <!--anon 表示匿名访问，不需要认证以及授权-->
                /loginAdmin=anon
                /login=anon
                /registerAdmin=anon
                /register=anon
                /css/**=anon
                /fonts/**=anon
                /img/**=anon
                /js/**=anon
                /other/**=anon
                <!--authc表示需要认证 没有进行身份认证是不能进行访问的-->
                /find=authc
                /student=roles[teacher]
                /teacher=perms["user:create"]
                <!--请求这个地址就自动退出-->
                /logout=logout
            </value>
        </property>
    </bean>
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 开启Shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- ++++++++++++++++++++++redis配置,发布订阅+++++++++++++++++++++ -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.pool.maxTotal}"/>
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
    </bean>
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}"/>
        <property name="port" value="${redis.port}"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
        <property name="password" value="${redis.password}"/>
    </bean>

    <!-- redis template definition -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>

    <bean id="redisContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="taskExecutor">
            <bean
                    class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
                <property name="corePoolSize" value="5" />
                <property name="keepAliveSeconds" value="30000" />
                <property name="maxPoolSize" value="50" />
            </bean>
        </property>
    </bean>
    <bean id="subManager" class="com.chen.pubsub.manager.SubManager" init-method="initfunc"/>
    <!-- ++++++++++++++++++++redis配置结束++++++++++++++++++++ -->

    <!-- ++++++++++++++++++++++发邮件相关++++++++++++++++++++ -->
    <bean id="htmlEmail" class="org.apache.commons.mail.HtmlEmail" scope="prototype">
        <property name="hostName" value="${commons.email.hostName}"/>
        <property name="smtpPort" value="${commons.email.smtpPort}"/>
        <property name="authenticator">
            <bean class="org.apache.commons.mail.DefaultAuthenticator">
                <constructor-arg name="userName" value="${commons.email.userName}"/>
                <constructor-arg name="password" value="${commons.email.password}"/>
            </bean>
        </property>
        <property name="SSLOnConnect" value="${commons.email.SSLOnConnect}"/>
        <property name="charset" value="${commons.email.charset}"/>
        <property name="from" value="${commons.email.from}"/>
        <property name="textMsg" value="这是一封html邮件，找一找加载按钮，单击它"/>
    </bean>

    <bean id="articleinfoEmail" class="com.chen.email.ArticleinfoEmail" scope="prototype">
    </bean>


    <!-- ++++++++++++++++++++每日新帖消息更新相关，生产消费者++++++++++++++++++++ -->
    <bean id="articleinfoSubscriber" class="com.chen.pubsub.subscriber.ArticleinfoSubscriber" scope="prototype">
        <constructor-arg name="redisTemplate" ref="redisTemplate"/>
        <constructor-arg name="articleinfoEmail" ref="articleinfoEmail"/>
    </bean>

    <bean id="messagePublisher" class="com.chen.pubsub.publisher.MessagePublisher" scope="prototype">
        <constructor-arg name="redisTemplate" ref="redisTemplate"/>
    </bean>

    <bean id="consumer" class="com.chen.pubsub.updater.Consumer" scope="prototype">
        <constructor-arg name="messagePublisher" ref="messagePublisher">
        </constructor-arg>
    </bean>

    <bean id="queue" class="java.util.concurrent.ConcurrentLinkedQueue"/>

    <bean id="articleinforUpdateManager" class="com.chen.pubsub.updater.ArticleinfoUpdateManager" init-method="init">
        <property name="THREAD_SIZE" value="10"/>
        <property name="subManager" ref="subManager"/>
        <property name="queue" ref="queue"/>
        <property name="producer">
            <bean class="com.chen.pubsub.updater.Producer">
                <constructor-arg name="queue" ref="queue"/>
            </bean>
        </property>
        <property name="messagePublisher" ref="messagePublisher"/>
        <property name="consumers">
            <list>
                <ref bean="consumer"/>
                <ref bean="consumer"/>
                <ref bean="consumer"/>
                <ref bean="consumer"/>
                <ref bean="consumer"/>
                <ref bean="consumer"/>
                <ref bean="consumer"/>
                <ref bean="consumer"/>
                <ref bean="consumer"/>
                <ref bean="consumer"/>
            </list>
        </property>
    </bean>

    <bean id="springConfigTool" class="com.chen.util.SpringConfigTool"/>

</beans>
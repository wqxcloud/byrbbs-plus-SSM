<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">


    <!-- 1.数据库文件的加载 -->
    <context:property-placeholder location="classpath:*.properties"/>

    <!-- 2.配置数据库连接池 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc_driver}"/>
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
    </bean>

    <!-- 3.配置SqlSessionFactory, 引入的是SqlSessionFactoryBean类-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 下面才是mybatis和spring整合最重要的步骤:a.注入数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- mybati全局配置文件 -->
        <property name="configLocation" value="classpath:MybatisConfig.xml"/>
    </bean>

    <!-- 4.Mapper -->
    <!--
    MapperScannerConfigurer：mapper的扫描器，将包下边的mapper接口自动创建代理对象，
    自动创建到spring容器中，bean的id是mapper的类名（首字母小写）
     -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 配置扫描包的路径
        如果要扫描多个包，中间使用半角逗号分隔
        要求:Mapper.java与Mapper.xml文件在同一个目录下
         -->
        <property name="basePackage" value="com.chen.mapper"/>
        <!-- 使用sqlSessionFactoryBeanName -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--&lt;!&ndash; 配置dao &ndash;&gt;-->
    <!--<bean id="userDao" class="dao.UserDaoImpl">-->
    <!--<property name="sqlSessionFactory" ref="sqlSessionFactory" />-->
    <!--</bean>-->

    <!-- ++++++++++++++++++++++数据相关配置结束+++++++++++++++++++++ -->

    <!-- 自动扫描位置 -->
    <context:component-scan base-package="com.chen">
        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    </context:component-scan>

    <!-- 访问静态资源,且静态文件存于webapp目录下 -->
    <mvc:default-servlet-handler/>
    <mvc:annotation-driven/>

    <!--<mvc:resources location="/image/" mapping="/image/**"/>-->
    <!--<mvc:resources location="/static/" mapping="/static/**"/>-->
    <!--<mvc:resources location="/bootstrap/" mapping="/bootstrap/**"/>-->


    <!--直接转发配置，不经过controller，直接转发到视图解析器-->
    <mvc:view-controller path="/table_bootstrap" view-name="table_bootstrap"/>
    <mvc:view-controller path="/table_data_tables" view-name="table_data_tables"/>
    <mvc:view-controller path="/pushrule" view-name="pushrule"/>
    <mvc:view-controller path="/login" view-name="login"/>
    <mvc:view-controller path="/register" view-name="register"/>

    <!-- 前端的渲染模板引擎thymeleaf-->
    <!--<bean id="templateResolver"-->
          <!--class="org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver">-->
        <!--<property name="prefix" value="/pages/" />-->
        <!--<property name="suffix" value=".html" />-->
        <!--<property name="templateMode" value="HTML" />-->
        <!--<property name="cacheable" value="false" />-->
        <!--&lt;!&ndash;这里要设置编码 &ndash;&gt;-->
        <!--<property name="characterEncoding" value="UTF-8"/>-->
    <!--</bean>-->

    <!--<bean id="templateEngine"-->
          <!--class="org.thymeleaf.spring4.SpringTemplateEngine">-->
        <!--<property name="templateResolver" ref="templateResolver" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置引擎的viewResoler&ndash;&gt;-->
    <!--<bean class="org.thymeleaf.spring4.view.ThymeleafViewResolver">-->
        <!--<property name="templateEngine" ref="templateEngine" />-->
        <!--<property name="characterEncoding" value="UTF-8"/>-->
    <!--</bean>-->

     <!--视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--shiro配置-->
    <!--自定义Realm-->
    <bean id="myRealm" class="com.chen.shiro.MyRealm"/>
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="myRealm"/>
    </bean>
    <!-- Shiro过滤器 核心-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 身份认证失败，则跳转到登录页面的配置 -->
        <property name="loginUrl" value="/login"/>
        <!-- 权限认证失败，则跳转到指定页面 -->
        <property name="unauthorizedUrl" value="/nopower"/>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <property name="filterChainDefinitions">
            <value>
                <!--anon 表示匿名访问，不需要认证以及授权-->
                /loginAdmin=anon
                /login=anon
                /registerAdmin=anon
                /register=anon
                /css/**=anon
                /fonts/**=anon
                /img/**=anon
                /js/**=anon
                /other/**=anon
                <!--authc表示需要认证 没有进行身份认证是不能进行访问的-->
                /find=authc
                /student=roles[teacher]
                /teacher=perms["user:create"]
                <!--请求这个地址就自动退出-->
                /logout=logout
            </value>
        </property>
    </bean>
    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 开启Shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- ++++++++++++++++++++++redis配置+++++++++++++++++++++ -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.pool.maxTotal}"/>
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
    </bean>
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}"/>
        <property name="port" value="${redis.port}"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
        <property name="password" value="${redis.password}"/>
    </bean>

    <!-- redis template definition -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>

    <bean id="redisContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="taskExecutor">
            <bean
                    class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
                <property name="corePoolSize" value="5" />
                <property name="keepAliveSeconds" value="30000" />
                <property name="maxPoolSize" value="50" />
            </bean>
        </property>
    </bean>
    <bean id="subManager" class="com.chen.pubsub.manager.SubManager" init-method="initfunc"/>
    <!-- ++++++++++++++++++++redis配置结束++++++++++++++++++++ -->

    <bean id="htmlEmal" class="org.apache.commons.mail.HtmlEmail" scope="prototype">
        <property name="hostName" value="${commons.email.hostName}"/>
        <property name="smtpPort" value="${commons.email.smtpPort}"/>
        <property name="authenticator">
            <bean class="org.apache.commons.mail.DefaultAuthenticator">
                <constructor-arg index="0" value="${commons.email.userName}"/>
                <constructor-arg index="1" value="${commons.email.password}"/>
            </bean>
        </property>
        <property name="SSLOnConnect" value="${commons.email.SSLOnConnect}"/>
        <property name="charset" value="${commons.email.charset}"/>
        <property name="from" value="${commons.email.from}"/>
        <property name="textMsg" value="${commons.email.textMsg}"/>
    </bean>


</beans>